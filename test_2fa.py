# test_2fa.py
# Module de test pour l'authentification 2FA

import streamlit as st
import streamlit_authenticator as stauth
import yaml
from yaml.loader import SafeLoader
import smtplib
import random
import string
import time
import json
import os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime

# === CONFIGURATION ===
st.set_page_config(page_title='Test 2FA TLB INVESTOR', layout='wide')

class Simple2FA:
    """
    Syst√®me 2FA simple : Username/MDP ‚Üí Code par email ‚Üí Acc√®s
    """
    
    def __init__(self):
        self.codes_file = ".temp/2fa_codes.json"
        self.code_expiry = 5 * 60  # 5 minutes en secondes
        
        # üìß CONFIGURATION EMAIL GMAIL
        self.smtp_server = "smtp.gmail.com"
        self.smtp_port = 587
        self.sender_email = "pierre.barennes@gmail.com"  # Votre Gmail
        self.sender_password = "yzzv lozh txvk alyv"     # Votre mot de passe d'app
    
    def generate_code(self) -> str:
        """G√©n√©rer un code al√©atoire de 8 chiffres"""
        return ''.join(random.choices(string.digits, k=6))
    
    def send_code_by_email(self, username: str, user_email: str) -> bool:
        """Envoyer le code de 8 chiffres par email avec mise en forme"""
        try:
            # G√©n√©rer le code
            code = self.generate_code()
            
            # Sauvegarder le code avec timestamp
            codes_data = self._load_codes()
            codes_data[username] = {
                'code': code,
                'timestamp': time.time(),
                'email': user_email
            }
            self._save_codes(codes_data)
            
            # Pr√©parer l'email avec mise en forme HTML
            msg = MIMEMultipart('alternative')
            msg['From'] = self.sender_email
            msg['To'] = user_email
            msg['Subject'] = "üîê Code de connexion TLB INVESTOR"
            
            # Version texte
            text_body = f"""
Bonjour {username},

Voici votre code de connexion pour TLB INVESTOR :

    {code}

‚è∞ Ce code expire dans 5 minutes.

Si vous n'√™tes pas √† l'origine de cette demande, ignorez cet email.

Cordialement,
TLB INVESTOR
            """
            
            # Version HTML avec mise en forme
            html_body = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }}
                    .container {{ max-width: 600px; margin: 0 auto; background-color: white; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 12px rgba(0,0,0,0.1); }}
                    .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }}
                    .header h1 {{ margin: 0; font-size: 24px; }}
                    .content {{ padding: 30px; }}
                    .code-container {{ background-color: #f8f9fa; border: 2px dashed #6c63ff; border-radius: 8px; padding: 25px; text-align: center; margin: 20px 0; }}
                    .code {{ font-size: 36px; font-weight: bold; color: #6c63ff; letter-spacing: 4px; font-family: 'Courier New', monospace; }}
                    .warning {{ background-color: #fff3cd; border-left: 4px solid #ffc107; padding: 15px; margin: 20px 0; }}
                    .footer {{ background-color: #f8f9fa; padding: 20px; text-align: center; font-size: 12px; color: #6c757d; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>üîê TLB INVESTOR</h1>
                        <p>Code de connexion s√©curis√©</p>
                    </div>
                    <div class="content">
                        <h2>Bonjour {username},</h2>
                        <p>Voici votre code de connexion s√©curis√© pour acc√©der √† TLB INVESTOR :</p>
                        
                        <div class="code-container">
                            <div class="code">{code}</div>
                            <p style="margin: 10px 0 0 0; color: #6c757d;">Code de v√©rification</p>
                        </div>
                        
                        <div class="warning">
                            <strong>‚è∞ Important :</strong> Ce code expire dans <strong>5 minutes</strong> pour votre s√©curit√©.
                        </div>
                        
                        <p>Si vous n'√™tes pas √† l'origine de cette demande, vous pouvez ignorer cet email en toute s√©curit√©.</p>
                        
                        <p>Cordialement,<br><strong>L'√©quipe TLB INVESTOR</strong></p>
                    </div>
                    <div class="footer">
                        <p>¬© 2025 TLB INVESTOR - Syst√®me d'authentification s√©curis√©</p>
                        <p>Ce message est g√©n√©r√© automatiquement, merci de ne pas y r√©pondre.</p>
                    </div>
                </div>
            </body>
            </html>
            """
            
            # Cr√©er les parties texte et HTML
            part1 = MIMEText(text_body, 'plain', 'utf-8')
            part2 = MIMEText(html_body, 'html', 'utf-8')
            
            # Ajouter les parties au message
            msg.attach(part1)
            msg.attach(part2)
            
            # Envoyer via Gmail
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.sender_email, self.sender_password)
                server.send_message(msg)
            
            st.success(f"‚úÖ Code {code} envoy√© √† {user_email}")  # Afficher le code pour le test
            return True
            
        except Exception as e:
            st.error(f"‚ùå Erreur envoi email : {e}")
            return False
    
    def verify_code(self, username: str, entered_code: str) -> dict:
        """V√©rifier le code saisi par l'utilisateur"""
        codes_data = self._load_codes()
        
        if username not in codes_data:
            return {
                'success': False, 
                'reason': 'no_code', 
                'message': "Aucun code g√©n√©r√©. Demandez un nouveau code."
            }
        
        user_data = codes_data[username]
        current_time = time.time()
        
        # V√©rifier l'expiration (5 minutes)
        if current_time - user_data['timestamp'] > self.code_expiry:
            del codes_data[username]
            self._save_codes(codes_data)
            return {
                'success': False, 
                'reason': 'expired', 
                'message': "Code expir√© (5 min). Demandez un nouveau code."
            }
        
        # V√©rifier le code
        if entered_code.strip() == user_data['code']:
            del codes_data[username]
            self._save_codes(codes_data)
            return {
                'success': True, 
                'message': "Code v√©rifi√© ! Connexion autoris√©e."
            }
        else:
            return {
                'success': False, 
                'reason': 'wrong_code', 
                'message': "Code incorrect. V√©rifiez et r√©essayez."
            }
    
    def _load_codes(self) -> dict:
        """Charger les codes depuis le fichier JSON"""
        try:
            if os.path.exists(self.codes_file):
                with open(self.codes_file, 'r') as f:
                    return json.load(f)
            return {}
        except:
            return {}
    
    def _save_codes(self, codes_data: dict):
        """Sauvegarder les codes dans le fichier JSON"""
        try:
            os.makedirs(".temp", exist_ok=True)
            with open(self.codes_file, 'w') as f:
                json.dump(codes_data, f, indent=2)
        except:
            pass

def display_2fa_interface(username: str, user_email: str) -> bool:
    """
    Interface 2FA : Envoi automatique + v√©rification du code
    Retourne True si validation r√©ussie, False sinon
    """
    
    # Initialiser le gestionnaire 2FA
    if 'tfa_manager' not in st.session_state:
        st.session_state.tfa_manager = Simple2FA()
    
    tfa_manager = st.session_state.tfa_manager
    
    # Interface utilisateur
    st.markdown("### üîê Authentification √† double facteur")
    st.info(f"üìß Un code de s√©curit√© va √™tre envoy√© automatiquement √† : **{user_email}**")
    
    # === ENVOI AUTOMATIQUE DU CODE ===
    if 'auto_code_sent' not in st.session_state:
        st.session_state.auto_code_sent = False
    
    if not st.session_state.auto_code_sent:
        with st.spinner("üì§ Envoi automatique du code de s√©curit√©..."):
            if tfa_manager.send_code_by_email(username, user_email):
                st.session_state.code_sent_time = time.time()
                st.session_state.auto_code_sent = True
                st.rerun()
            else:
                st.error("‚ùå Erreur lors de l'envoi automatique.")
                return False
    
    # === BOUTON RENVOYER ===
    st.markdown("---")
    col_info, col_resend = st.columns([3, 1])
    
    with col_info:
        st.success("‚úÖ Code envoy√© ! V√©rifiez votre bo√Æte email (et le dossier spam).")
    
    with col_resend:
        if st.button("üîÑ Renvoyer", help="Renvoyer un nouveau code", use_container_width=True):
            with st.spinner("üì§ Renvoi en cours..."):
                if tfa_manager.send_code_by_email(username, user_email):
                    st.session_state.code_sent_time = time.time()
                    st.success("‚úÖ Nouveau code envoy√© !")
                    st.rerun()
                else:
                    st.error("‚ùå Erreur lors du renvoi.")
    
    # === AFFICHER LE TEMPS RESTANT ===
    if 'code_sent_time' in st.session_state:
        elapsed = time.time() - st.session_state.code_sent_time
        remaining = max(0, 300 - elapsed)  # 5 minutes = 300 secondes
        
        if remaining > 0:
            minutes = int(remaining // 60)
            seconds = int(remaining % 60)
            st.info(f"‚è∞ Code valide encore **{minutes}m {seconds}s**")
        else:
            st.warning("‚è∞ Code expir√© ! Cliquez sur 'Renvoyer' pour un nouveau code.")
    
    # === FORMULAIRE DE V√âRIFICATION ===
    st.markdown("---")
    with st.form("code_verification_form"):
        st.markdown("#### üî¢ Saisissez votre code de 8 chiffres")
        
        code_input = st.text_input(
            "Code re√ßu par email",
            max_chars=8,
            placeholder="12345678",
            help="Code de 8 chiffres re√ßu par email"
        )
        
        verify_button = st.form_submit_button("‚úÖ V√©rifier le code", type="primary", use_container_width=True)
    
    # === TRAITEMENT DE LA V√âRIFICATION ===
    if verify_button and code_input:
        if len(code_input) != 8 or not code_input.isdigit():
            st.error("‚ö†Ô∏è Le code doit contenir exactement 8 chiffres.")
        else:
            result = tfa_manager.verify_code(username, code_input)
            
            if result['success']:
                st.success(result['message'])
                # Nettoyer les variables de session
                if 'code_sent_time' in st.session_state:
                    del st.session_state.code_sent_time
                if 'auto_code_sent' in st.session_state:
                    del st.session_state.auto_code_sent
                time.sleep(1)
                return True  # ‚úÖ VALIDATION R√âUSSIE
            else:
                st.error(result['message'])
                if result['reason'] == 'expired':
                    # Code expir√©, nettoyer
                    if 'code_sent_time' in st.session_state:
                        del st.session_state.code_sent_time
                    if 'auto_code_sent' in st.session_state:
                        del st.session_state.auto_code_sent
    
    return False  # ‚ùå PAS ENCORE VALID√â

# === CONFIGURATION DU CONFIG.YAML ===

# Charger le config.yaml existant depuis le dossier courant
config_path = 'config.yaml'
if not os.path.exists(config_path):
    st.error('‚ùå Fichier config.yaml introuvable dans le dossier courant.')
    st.info('üí° Assurez-vous que le fichier config.yaml est dans le m√™me dossier que ce script de test.')
    st.stop()

# === CHARGER LA CONFIGURATION ===
try:
    with open(config_path, 'r', encoding='utf-8') as f:
        config = yaml.load(f, Loader=SafeLoader)
    st.success(f"‚úÖ Configuration charg√©e depuis {config_path}")
except Exception as e:
    st.error(f"‚ùå Erreur lors du chargement du fichier config.yaml : {e}")
    st.stop()

# === AUTHENTIFICATEUR ===
authenticator = stauth.Authenticate(
    config['credentials'], 
    config['cookie']['name'],
    config['cookie']['key'], 
    config['cookie']['expiry_days']
)

# === INTERFACE PRINCIPALE ===

st.title("üß™ Test Authentification 2FA - TLB INVESTOR")

st.markdown("""
### üéØ **Test du syst√®me d'authentification √† 2 facteurs**

**√âtapes du test :**
1. **Connexion classique** : Username + Mot de passe
2. **2FA automatique** : Code envoy√© par email
3. **Validation** : Saisie du code re√ßu
4. **Acc√®s** : Interface d'administration

**Comptes de test disponibles :**
- `pbarennes` (MDP: `PB`) ‚Üí pierre.barennes@gmail.com
- `PB` (MDP: `PB`) ‚Üí p.barennes@pareanbiotech.fr  
- `tlibert` (MDP: voir Thomas) ‚Üí contact.thomastlb@gmail.com
""")

st.markdown("---")

# === GESTION DE L'AUTHENTIFICATION ===
try:
    authenticator.login()
except Exception as e:
    st.error(f"Erreur d'authentification : {e}")

# === TRAITEMENT DES CAS ===
if st.session_state.get('authentication_status') is False:
    st.error('‚ùå Nom d\'utilisateur ou mot de passe incorrect')
    
elif st.session_state.get('authentication_status') is None:
    st.warning('üëÜ Veuillez saisir vos identifiants ci-dessus')
    
elif st.session_state.get('authentication_status') is True:
    
    # === √âTAPE 1 : AUTHENTIFICATION CLASSIQUE R√âUSSIE ===
    username = st.session_state.get('username')
    st.success(f"‚úÖ **√âtape 1 r√©ussie** : Authentification classique pour {username}")
    
    # R√©cup√©rer les informations utilisateur
    user_info = config['credentials']['usernames'][username]
    user_email = user_info.get('email')
    first_name = user_info.get('first_name')
    last_name = user_info.get('last_name')
    
    st.info(f"üë§ **Utilisateur** : {first_name} {last_name} ({user_email})")
    
    # === √âTAPE 2 : V√âRIFICATION 2FA ===
    if 'tfa_verified' not in st.session_state:
        st.session_state.tfa_verified = False
    
    if not st.session_state.tfa_verified:
        st.markdown("---")
        st.markdown("### ‚≠ê **√âtape 2 : Authentification 2FA**")
        
        if display_2fa_interface(username, user_email):
            st.session_state.tfa_verified = True
            st.rerun()
        else:
            st.stop()  # Arr√™ter jusqu'√† validation 2FA
    
    # === √âTAPE 3 : ACC√àS ACCORD√â ===
    st.markdown("---")
    st.success("üéâ **Test r√©ussi !** Authentification 2FA compl√®te")
    
    st.markdown(f"""
    ### ‚úÖ **R√©capitulatif du test :**
    
    **üë§ Utilisateur connect√© :** {first_name} {last_name} ({username})  
    **üìß Email utilis√© :** {user_email}  
    **üîê √âtape 1 :** Authentification classique ‚úÖ  
    **üì± √âtape 2 :** Code 2FA par email ‚úÖ  
    **üö™ Acc√®s :** Application autoris√©e ‚úÖ  
    
    ### üõ†Ô∏è **Interface d'administration (simulation)**
    """)
    
    # Interface de test
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üîí S√©curit√©", "2FA Activ√©", "‚úÖ S√©curis√©")
    
    with col2:
        access_level = user_info.get('access_level', 'standard')
        st.metric("üëë Niveau d'acc√®s", access_level.title(), "üéØ Autoris√©")
    
    with col3:
        login_time = datetime.now().strftime('%H:%M:%S')
        st.metric("‚è∞ Connexion", login_time, "üïê Maintenant")
    
    # Bouton de d√©connexion
    st.markdown("---")
    col_logout, col_empty = st.columns([1, 3])
    
    with col_logout:
        if st.button("üö™ Se d√©connecter", type="secondary"):
            # Nettoyer toutes les variables 2FA
            if 'tfa_verified' in st.session_state:
                del st.session_state.tfa_verified
            if 'code_sent_time' in st.session_state:
                del st.session_state.code_sent_time
            if 'auto_code_sent' in st.session_state:
                del st.session_state.auto_code_sent
            if 'tfa_manager' in st.session_state:
                del st.session_state.tfa_manager
            
            # D√©connexion classique
            authenticator.logout()
            st.rerun()

# === SECTION DEBUG ===
with st.sidebar:
    st.markdown("### üîß Debug")
    
    if st.button("üß™ Test envoi email rapide"):
        tfa = Simple2FA()
        test_success = tfa.send_code_by_email("test_user", "pierre.barennes@gmail.com")
        if test_success:
            st.success("‚úÖ Email de test envoy√© !")
        else:
            st.error("‚ùå Erreur envoi test")
    
    st.markdown("### üìä √âtat de la session")
    st.write("**Authentication Status:**", st.session_state.get('authentication_status'))
    st.write("**Username:**", st.session_state.get('username'))
    st.write("**2FA Verified:**", st.session_state.get('tfa_verified', False))
    st.write("**Auto Code Sent:**", st.session_state.get('auto_code_sent', False))
    
    if 'code_sent_time' in st.session_state:
        elapsed = time.time() - st.session_state.code_sent_time
        st.write(f"**Code envoy√© il y a:** {elapsed:.0f}s")

st.markdown("---")
st.markdown("_Test module cr√©√© pour TLB INVESTOR - Authentification 2FA_")
